--
--	mandelbrot.occ -- text example of a mandelbrot set in occam
--	Copyright (C) 1997 Jim Moores
--	COMPLEX64 code Copyright (C) 1997 D.C. Wood <D.C.Wood@ukc.ac.uk>
--      (distributed version, client)
--	Modifications (C) 2001, 2007 Fred Barnes
--      Modifications for opencl (C) 2011 Brendan le Foll
--
--	This program is free software; you can redistribute it and/or modify
--	it under the terms of the GNU General Public License as published by
--	the Free Software Foundation; either version 2 of the License, or
--	(at your option) any later version.
--
--	This program is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--	GNU General Public License for more details.
--
--	You should have received a copy of the GNU General Public License
--	along with this program; if not, write to the Free Software
--	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
--


#INCLUDE "course.module"

#PRAGMA EXTERNAL "PROC C.mandelbrot ([][][]BYTE data) = 0"
#PRAGMA EXTERNAL "PROC C.initmandelbrot () = 0"
#PRAGMA EXTERNAL "PROC C.initialisecl () = 0"
#PRAGMA EXTERNAL "PROC C.printfjob (VAL []REAL64 job) = 0"
#PRAGMA EXTERNAL "PROC C.printfint (VAL INT int) = 0"
#PRAGMA EXTERNAL "PROC C.destroycl () = 0"

VAL INT IMAGE.WIDTH IS 100:
VAL INT IMAGE.HEIGHT IS 50:

VAL INT N.ITERS IS 850:

VAL [][5]BYTE ansicolours IS ["*#1B[31m", "*#1B[32m", "*#1B[33m", "*#1B[36m", "*#1B[35m", "*#1B[34m"]:

PROC harvester (CHAN BYTE scr!)
  [N.ITERS][IMAGE.HEIGHT][IMAGE.WIDTH * 2]BYTE framebuffer:
  TIMER tim:
  INT start, stop:
  SEQ
    tim ? start
    C.mandelbrot(framebuffer)

    #IF FALSE
    SEQ frame = 0 FOR N.ITERS
      SEQ
        cursor.x.y (1, 1, scr!)
        INITIAL BYTE cpix IS #FF:
        SEQ j = 0 FOR IMAGE.HEIGHT
          SEQ
            SEQ i = 0 FOR IMAGE.WIDTH
              BYTE v:
              SEQ
                v := framebuffer[frame][j][i*2]
                IF
                  cpix <> v
                    SEQ
                      cpix := v
                      out.string (ansicolours[INT (cpix)], 0, scr!)
                  TRUE
                    SKIP
                scr ! framebuffer[frame][j][((i*2)+1)]
            scr ! '*n'
        -- normalise colour
        out.string ("*#1B[0m", 0, scr!)
        flush (scr!)
    #ENDIF

    tim ? stop

    out.string ("time = ", 0, scr!)
    out.int ((stop MINUS start) / 1000, 0, scr!)
    out.string (" ms*n", 0, scr!)
:


PROC mandelbrot (CHAN BYTE kyb?, scr!, err!)
  SEQ
    cursor.invisible (scr!)
    erase.screen (scr!)

    -- initialise openCL and mandelbrot CL kernel
    C.initialisecl()
    C.initmandelbrot ()

    harvester (scr!)

    cursor.visible (scr!)
    C.destroycl()
:


